#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.1 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 31 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 29 #"drscheme:bindings-snipclass%\0"
1 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 57 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 255 255 12 12 12 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 92 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 104 104 246 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 104 104 246 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 235 255 102 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 235 255 102 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 92 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1           0 1715 0 26 3 1 #"("
0 0 14 3 4 #"load"
0 0 26 3 1 #" "
0 0 20 3 18 #"\"simpleParser.scm\""
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 38 #"; undeclared variables have this value"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 16 #"undeclared_value"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 3 #" ()"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 23 3 1 #"'"
0 0 14 3 10 #"undeclared"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 38 #"; unassigned variables have this value"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 11 #"error_value"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 3 #" ()"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 23 3 1 #"'"
0 0 14 3 5 #"error"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"interpret"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 8 #"filename"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 13 #"evaluate_tree"
0 0 26 3 2 #" ("
0 0 14 3 6 #"parser"
0 0 26 3 1 #" "
0 0 14 3 8 #"filename"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 13 #"evaluate_tree"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"tree"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 6 #"search"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 6 #"return"
0 0 26 3 2 #" ("
0 0 14 3 17 #"M_state_stmt-list"
0 0 26 3 1 #" "
0 0 14 3 4 #"tree"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 10 #"(()())))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 17 #"M_state_stmt-list"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 9 #"stmt-list"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 9 #"stmt-list"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"        "
0 0 14 3 5 #"state"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 17 #"M_state_stmt-list"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 9 #"stmt-list"
0 0 26 3 3 #") ("
0 0 14 3 12 #"M_state_stmt"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 9 #"stmt-list"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 101
(
 #"; a helper function: given a list and S-expression, determine if the"
 #" first element in the list equals"
) 0 0 26 29 1 #"\n"
0 0 18 3 18 #"; the S-expression"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 4 #"feq?"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"lis"
0 0 26 3 1 #" "
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 5 #"list?"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 3 #") ("
0 0 14 3 3 #"not"
0 0 26 3 1 #"("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 10 #"         ("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 2 #") "
0 0 14 3 1 #"s"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"         "
0 0 23 3 2 #"#f"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 3 #"len"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 3 #"lis"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 1 26 65 1 #"\t"
0 0 26 3 1 #"("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 12 #"            "
0 0 23 3 1 #"0"
0 0 26 29 1 #"\n"
0 0 26 3 13 #"            ("
0 0 14 3 1 #"+"
0 0 26 3 1 #" "
0 0 23 3 1 #"1"
0 0 26 3 2 #" ("
0 0 14 3 3 #"len"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 3 #"lis"
0 0 26 3 6 #"))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 69
(
 #"; a helper function: given a nonterminal, determine if it is a <type"
 #">"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 5 #"type?"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"nterm"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 3 #"var"
0 0 26 3 4 #"))) "
0 0 26 29 1 #"\n"
0 0 18 3 17 #";one or the other"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 98
(
 #"; a helper function: given the \"operative\" (the first) element in "
 #"the stmt's list, call a function"
) 0 0 26 29 1 #"\n"
0 0 18 3 80
(
 #"; with the parameters, eg given (= x 1) call the appropriate functio"
 #"n with (x 1)"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 12 #"call_on_stmt"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 8 #"function"
0 0 26 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 8 #"function"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 4 #"stmt"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 71
(
 #"; given the whole state, get the list of names and values, respectiv"
 #"ely"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 15 #"get_state_names"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 16 #"get_state_values"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 81
(
 #"; perform a list operation on the state, both names and values are a"
 #"ffected alike"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 12 #"state_listop"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"state"
0 0 26 3 1 #" "
0 0 14 3 8 #"function"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 8 #"function"
0 0 26 3 2 #" ("
0 0 14 3 15 #"get_state_names"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 8 #"function"
0 0 26 3 2 #" ("
0 0 14 3 16 #"get_state_values"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 3 #")) "
0 0 23 3 1 #"'"
0 0 26 3 6 #"()))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 43 #"; helper function for if the state is empty"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 14 #"is_state_empty"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #")) ("
0 0 14 3 5 #"null?"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 60
#"; adds a variable to the state with the given name and value"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 12 #"add_to_state"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"name"
0 0 26 3 1 #" "
0 0 14 3 5 #"value"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 71
(
 #"; if we didn't find a previous value, add it, and if we did, replace"
 #" it"
) 0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 14 #"is_state_empty"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 4 #"list"
0 0 26 3 1 #" "
0 0 14 3 4 #"name"
0 0 26 3 3 #") ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 5 #"value"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 26 3 6 #"()))))"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"     "
0 0 18 11 116
(
 #"; ((feq? (get_state_names state) name) ((cons name (cdr (get_state_n"
 #"ames state)))(cons value (cdr (get_state_values "
) 0 0 18 3 10 #"state)))))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 4 #"feq?"
0 0 26 3 2 #" ("
0 0 14 3 15 #"get_state_names"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 2 #") "
0 0 14 3 4 #"name"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 4 #"name"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #")))("
0 0 14 3 4 #"list"
0 0 26 3 1 #"("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 5 #"value"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 7 #")))))))"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 57 #"; if we're not at the end yet and haven't found it, recur"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 11 115
(
 #";(else (cons (car (get_state_names state)) (car(add_to_state name va"
 #"lue (state_listop state cdr))) (cadr(cons (car "
) 0 0 18 3 83
(
 #"(get_state_values state) (add_to_state name value (state_listop valu"
 #"e cdr))))))))))"
) 0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 9 #"integrate"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 2 #" ("
0 0 14 3 15 #"get_state_names"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #")) ("
0 0 14 3 3 #"car"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 2 #" ("
0 0 14 3 16 #"get_state_values"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 5 #"))) ("
0 0 14 3 12 #"add_to_state"
0 0 26 3 1 #" "
0 0 14 3 4 #"name"
0 0 26 3 1 #" "
0 0 14 3 5 #"value"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 11 1 #" "
0 0 26 3 1 #"("
0 0 14 3 3 #"cdr"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #"))) "
0 0 23 3 1 #"'"
0 0 26 3 10 #"()))))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 1 #";"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"integrate"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"name"
0 0 26 3 1 #" "
0 0 14 3 5 #"value"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 4 #"name"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #")) ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 14 3 5 #"value"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #"))) "
0 0 23 3 1 #"'"
0 0 26 3 6 #"()))))"
0 0 26 29 1 #"\n"
0 0 18 3 83
(
 #"; racket supports short circuit evaluation, so we can write this as "
 #"one conditional"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 12 #"M_state_stmt"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 4 #"feq?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #"if"
0 0 26 3 3 #") ("
0 0 14 3 12 #"call_on_stmt"
0 0 26 3 1 #" "
0 0 14 3 10 #"M_state_if"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 4 #"feq?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 5 #"while"
0 0 26 3 3 #") ("
0 0 14 3 12 #"call_on_stmt"
0 0 26 3 1 #" "
0 0 14 3 13 #"M_state_while"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"type?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 4 #")) ("
0 0 14 3 12 #"call_on_stmt"
0 0 26 3 1 #" "
0 0 14 3 15 #"M_state_declare"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 4 #"feq?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"="
0 0 26 3 3 #") ("
0 0 14 3 12 #"call_on_stmt"
0 0 26 3 1 #" "
0 0 14 3 14 #"M_state_assign"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 4 #"feq?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 6 #"return"
0 0 26 3 3 #") ("
0 0 14 3 12 #"call_on_stmt"
0 0 26 3 1 #" "
0 0 14 3 14 #"M_state_return"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 3 #")) "
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 5 #"error"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 20 3 23 #"\"symbol not recognized\""
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 7 #")))))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 9 #"has_else?"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"nterm"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"len"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 23 3 1 #"3"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 10 #"M_state_if"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 19 #"M_boolean_condition"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 2 #") "
0 0 23 3 2 #"#t"
0 0 26 3 3 #") ("
0 0 14 3 12 #"M_state_stmt"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 9 #"has_else?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 3 #") ("
0 0 14 3 12 #"M_state_stmt"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 13 #"M_state_while"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 19 #"M_boolean_condition"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 2 #") "
0 0 23 3 2 #"#t"
0 0 26 3 3 #") ("
0 0 14 3 13 #"M_state_while"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #" ("
0 0 14 3 12 #"M_state_stmt"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"      "
0 0 18 3 72
(
 #";((eq? (car nterm) #t) (M_state_while nterm (M_state_stmt (cdr nterm"
 #"))))"
) 0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 19 #"declare_has_assign?"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"nterm"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 3 #"len"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 23 3 1 #"3"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 15 #"M_state_declare"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 19 #"declare_has_assign?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 12 #"add_to_state"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 3 #") ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 2 #") "
0 0 18 3 44 #";add the variable to the state and assign it"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 12 #"add_to_state"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 3 #") ("
0 0 14 3 11 #"error_value"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 5 #")))) "
0 0 18 3 31 #";otherwise just assign it error"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 14 #"M_state_assign"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 12 #"add_to_state"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 3 #") ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    ))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 14 #"M_state_return"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 6 #"search"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 6 #"return"
0 0 26 3 2 #" ("
0 0 14 3 12 #"add_to_state"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 6 #"return"
0 0 26 3 2 #" ("
0 0 14 3 12 #"M_value_plus"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 4 #"    "
0 0 18 3 23 #";(search 'return state)"
0 0 26 29 1 #"\n"
0 0 26 3 6 #"    ))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 84
(
 #";returns the value of a pair in the state ex: looking for y in (y 12"
 #") returns twleve"
) 0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 6 #"search"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 1 #"x"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 14 #"is_state_empty"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 3 #") ("
0 0 14 3 16 #"undeclared_value"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #" ("
0 0 14 3 4 #"caar"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #")) ("
0 0 14 3 3 #"car"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 2 #" ("
0 0 14 3 6 #"search"
0 0 26 3 1 #" "
0 0 14 3 1 #"x"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #")) ("
0 0 14 3 4 #"list"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 2 #" ("
0 0 14 3 3 #"car"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 10 #"))))))))))"
0 0 26 29 1 #"\n"
0 0 26 3 1 #" "
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 19 #"M_boolean_condition"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 25 #"M_boolean_ored_expression"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #"))) "
0 0 18 3 30 #";this would be the conditional"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 25 #"M_boolean_ored_expression"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 4 #"feq?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #"||"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 2 #"or"
0 0 26 3 2 #" ("
0 0 14 3 25 #"M_boolean_ored_expression"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 3 #") ("
0 0 14 3 25 #"M_boolean_ored_expression"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 26 #"M_boolean_anded_expression"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 26 #"M_boolean_anded_expression"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 4 #"feq?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #"&&"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 26 #"M_boolean_anded_expression"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 3 #") ("
0 0 14 3 26 #"M_boolean_anded_expression"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cddr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 28 #"M_boolean_compare_expression"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 18 3 62
#"; helper function for comparing the two parts of an expression"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 13 #"compare_value"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #" "
0 0 14 3 8 #"function"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 8 #"function"
0 0 26 3 2 #" ("
0 0 14 3 12 #"M_value_plus"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 3 #") ("
0 0 14 3 12 #"M_value_plus"
0 0 26 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 28 #"M_boolean_compare_expression"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 4 #"feq?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"!"
0 0 26 3 3 #") ("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 28 #"M_boolean_compare_expression"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 4 #"feq?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #"=="
0 0 26 3 3 #") ("
0 0 14 3 13 #"compare_value"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #" "
0 0 14 3 3 #"eq?"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 4 #"feq?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #"!="
0 0 26 3 3 #") ("
0 0 14 3 13 #"compare_value"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 2 #" ("
0 0 14 3 3 #"not"
0 0 26 3 1 #" "
0 0 14 3 3 #"eq?"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 4 #"feq?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"<"
0 0 26 3 3 #") ("
0 0 14 3 13 #"compare_value"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #" "
0 0 14 3 1 #"<"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 4 #"feq?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #">"
0 0 26 3 3 #") ("
0 0 14 3 13 #"compare_value"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #" "
0 0 14 3 1 #">"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 4 #"feq?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #"<="
0 0 26 3 3 #") ("
0 0 14 3 13 #"compare_value"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #" "
0 0 14 3 2 #"<="
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 4 #"feq?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 2 #">="
0 0 26 3 3 #") ("
0 0 14 3 13 #"compare_value"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #" "
0 0 14 3 2 #">="
0 0 26 3 5 #")))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 12 #"M_value_plus"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 4 #"feq?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"+"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 1 #"+"
0 0 26 3 2 #" ("
0 0 14 3 12 #"M_value_plus"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 3 #") ("
0 0 14 3 12 #"M_value_plus"
0 0 26 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 13 #"M_value_minus"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 13 #"M_value_minus"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 3 #"and"
0 0 26 3 2 #" ("
0 0 14 3 4 #"feq?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"-"
0 0 26 3 3 #") ("
0 0 14 3 1 #">"
0 0 26 3 2 #" ("
0 0 14 3 3 #"len"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 23 3 1 #"2"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 1 #"-"
0 0 26 3 2 #" ("
0 0 14 3 12 #"M_value_plus"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 3 #") ("
0 0 14 3 12 #"M_value_plus"
0 0 26 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 13 #"M_value_times"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 13 #"M_value_times"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 4 #"feq?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"*"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 1 #"*"
0 0 26 3 2 #" ("
0 0 14 3 12 #"M_value_plus"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 3 #") ("
0 0 14 3 12 #"M_value_plus"
0 0 26 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 11 #"M_value_div"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 11 #"M_value_div"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 4 #"feq?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"/"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 8 #"quotient"
0 0 26 3 2 #" ("
0 0 14 3 12 #"M_value_plus"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 3 #") ("
0 0 14 3 12 #"M_value_plus"
0 0 26 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 11 #"M_value_mod"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 11 #"M_value_mod"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 4 #"feq?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"%"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 6 #"modulo"
0 0 26 3 2 #" ("
0 0 14 3 12 #"M_value_plus"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cadr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 3 #") ("
0 0 14 3 12 #"M_value_plus"
0 0 26 3 2 #" ("
0 0 14 3 5 #"caddr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 2 #") "
0 0 14 3 5 #"state"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 11 #"          ("
0 0 14 3 16 #"M_value_negative"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 16 #"M_value_negative"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 14 3 2 #"if"
0 0 26 3 2 #" ("
0 0 14 3 4 #"feq?"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 23 3 1 #"'"
0 0 14 3 1 #"-"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 1 #"*"
0 0 26 3 1 #" "
0 0 23 3 2 #"-1"
0 0 26 3 2 #" ("
0 0 14 3 12 #"M_value_plus"
0 0 26 3 2 #" ("
0 0 14 3 3 #"cdr"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 9 #"        ("
0 0 14 3 16 #"M_value_terminal"
0 0 26 3 1 #" "
0 0 14 3 5 #"nterm"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0 0 26 29 1 #"\n"
0 0 26 3 1 #"("
0 0 16 3 6 #"define"
0 0 26 3 1 #" "
0 0 14 3 16 #"M_value_terminal"
0 0 26 29 1 #"\n"
0 0 26 3 3 #"  ("
0 0 16 3 6 #"lambda"
0 0 26 3 2 #" ("
0 0 14 3 4 #"term"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 5 #"    ("
0 0 16 3 4 #"cond"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 5 #"list?"
0 0 26 3 1 #" "
0 0 14 3 4 #"term"
0 0 26 3 3 #") ("
0 0 14 3 5 #"error"
0 0 26 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 26 3 1 #" "
0 0 20 3 42 #"\"nonterminal at the end of the parse tree\""
0 0 26 3 1 #" "
0 0 14 3 4 #"term"
0 0 26 3 3 #")))"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 4 #"term"
0 0 26 3 1 #" "
0 0 20 3 6 #"\"true\""
0 0 26 3 2 #") "
0 0 23 3 2 #"#t"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"eq?"
0 0 26 3 1 #" "
0 0 14 3 4 #"term"
0 0 26 3 1 #" "
0 0 20 3 7 #"\"false\""
0 0 26 3 2 #") "
0 0 23 3 2 #"#f"
0 0 26 3 1 #")"
0 0 26 29 1 #"\n"
0 0 26 3 8 #"      (("
0 0 14 3 3 #"not"
0 0 26 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 26 3 2 #" ("
0 0 14 3 6 #"search"
0 0 26 3 1 #" "
0 0 14 3 4 #"term"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 3 #") ("
0 0 14 3 16 #"undeclared_value"
0 0 26 3 5 #"))) ("
0 0 14 3 6 #"search"
0 0 26 3 1 #" "
0 0 14 3 4 #"term"
0 0 26 3 1 #" "
0 0 14 3 5 #"state"
0 0 26 3 2 #"))"
0 0 26 29 1 #"\n"
0 0 26 3 7 #"      ("
0 0 14 3 4 #"else"
0 0 26 3 1 #" "
0 0 14 3 4 #"term"
0 0 26 3 4 #"))))"
0 0 26 29 1 #"\n"
0           0
